apply plugin: 'com.android.application'

//apply plugin: 'kotlin-android'
//
//apply plugin: 'kotlin-android-extensions'
//制作补丁时将这个打开，auto-patch-plugin紧跟着com.android.application
//apply plugin: 'auto-patch-plugin'
//apply plugin: 'robust'
android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.gitstudy.client"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk{
            //模块名称,即编译的.so文件
            moduleName "hello_jni"
            //使用STL标准库（默认情况下JNI无法使用STL标准库）
            stl "stlport_static"
            //"log"表示加入android的调试日志，只要在导入#include<android/log.h>
            //就可以使用_andorid_log_print方法打印日志到logcat中
            ldLibs "log"
        }
    }

    //执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉。
    lintOptions {
        abortOnError false
    }


    //签名
    signingConfigs {
        debug {

        }
        release {// 自己的签名文件
            storeFile file("D:\\zdworkspase/myKeystore.jks")
            storePassword "123456"
            keyAlias "key"
            keyPassword "123456"
        }
    }

    buildTypes {
        debug {
            // 显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            versionNameSuffix "-debug"
            minifyEnabled true
            zipAlignEnabled false
            shrinkResources false
//            signingConfig signingConfigs.debug
        }

        release {
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //混淆
            minifyEnabled true
            //Zipalign优化
            zipAlignEnabled true

            // 移除无用的resource文件
            shrinkResources true
            //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，后一个文件是自己的定义混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名
            signingConfig signingConfigs.release

//            applicationVariants.all { variant ->
//                variant.outputs.each { output ->
//                    def outputFile = output.outputFile
//                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                        // 输出apk名称为app_v1.0_2015-xx-xx_xxxx.apk
//                        //def fileName = "app_v${defaultConfig.versionName}_${releaseTime()}.apk"
//                        def fileName = "app_v${defaultConfig.versionName}_${variant.productFlavors[0].name}.apk"
//                        output.outputFile = new File(outputFile.parent, fileName)
//                    }
//                }
//            }
        }
        //渠道Flavors，配置不同风格的app,友盟渠道统计时用到
//       productFlavors {
//           offical{
//               applicationId "com.gitstudy.client"
//               versionName "version-a-1.0"
//           }
//       }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            aidl.srcDirs = ['src/main/aidl']
        }
    }
    buildToolsVersion '28.0.3'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.facebook.fresco:imagepipeline-okhttp3:1.9.0'
    implementation 'com.facebook.fresco:fresco:1.9.0'
    // 支持 GIF 动图，需要添加
    //    implementation 'com.facebook.fresco:animated-gif:1.9.0'
    // 支持 WebP （静态图+动图），需要添加
    implementation 'com.facebook.fresco:animated-webp:1.9.0'
    implementation 'com.facebook.fresco:webpsupport:1.9.0'
    implementation files('libs/baselibrary.jar')
    implementation 'com.meituan.robust:robust:0.4.82'
}
